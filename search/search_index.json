{"config":{"lang":["ja"],"separator":"[\\s\\-\uff0c\u3002]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u9996\u9875","text":""},{"location":"offline/","title":"\u79bb\u7ebf","text":"<p>\u4f60\u76ee\u524d\u5904\u4e8e\u79bb\u7ebf\u72b6\u6001\uff0c\u8be5\u9875\u9762\u65e0\u6cd5\u5c55\u793a\u3002\u8bf7\u68c0\u67e5\u7f51\u7edc\u72b6\u6001\u5e76\u91cd\u8bd5\u3002</p>"},{"location":"leetcode/","title":"\u9898\u89e3\u7d22\u5f15","text":""},{"location":"leetcode/#dif","title":"DIF:\u4e2d\u7b49","text":"<ul> <li>2. \u4e24\u6570\u76f8\u52a0</li> </ul>"},{"location":"leetcode/#dif_1","title":"DIF:\u7b80\u5355","text":"<ul> <li>14. \u6700\u957f\u516c\u5171\u524d\u7f00</li> <li>26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879</li> </ul>"},{"location":"leetcode/#_2","title":"\u53cc\u6307\u9488","text":"<ul> <li>26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879</li> </ul>"},{"location":"leetcode/#_3","title":"\u5b57\u7b26\u4e32","text":"<ul> <li>14. \u6700\u957f\u516c\u5171\u524d\u7f00</li> </ul>"},{"location":"leetcode/#_4","title":"\u6570\u5b66","text":"<ul> <li>2. \u4e24\u6570\u76f8\u52a0</li> </ul>"},{"location":"leetcode/#_5","title":"\u6570\u7ec4","text":"<ul> <li>26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879</li> </ul>"},{"location":"leetcode/#_6","title":"\u94fe\u8868","text":"<ul> <li>2. \u4e24\u6570\u76f8\u52a0</li> </ul>"},{"location":"leetcode/problem_14/","title":"14. \u6700\u957f\u516c\u5171\u524d\u7f00","text":"<p>\u4ece\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e8f\u5217\u4e2d\u627e\u51fa\u516c\u5171\u524d\u7f00\u6700\u957f\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 <code>\"\"</code>\u3002</p> \u6837\u4f8b 1\u6837\u4f8b 2\u9650\u5236\u6761\u4ef6 <p><pre>\n<code>\u8f93\u5165\uff1astrs = [\"flower\",\"flow\",\"flight\"]\n\u8f93\u51fa\uff1a\"fl\"</code>\n</pre></p> <p><pre>\n<code>\u8f93\u5165\uff1astrs = [\"dog\",\"racecar\",\"car\"]\n\u8f93\u51fa\uff1a\"\"\n\u89e3\u91ca\uff1a\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\u3002</code>\n</pre></p> <ul> <li><code>1 &lt;= strs.length &lt;= 200</code>\uff1b</li> <li><code>0 &lt;= strs[i].length &lt;= 200</code>\uff1b</li> <li><code>strs[i]</code> \u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002</li> </ul>","tags":["DIF:\u7b80\u5355","\u5b57\u7b26\u4e32"]},{"location":"leetcode/problem_14/#_1","title":"\u89e3\u6790","text":"<p>\u89e3\u51b3\u6b64\u9898\u53ea\u9700\u626b\u63cf\u5b57\u7b26\u4e32\u5373\u53ef\uff0c\u53ef\u9009\u62e9\u6a2a\u5411\u626b\u63cf\u5b57\u7b26\u4e32\u6216\u8005\u7eb5\u5411\u626b\u63cf\u5b57\u7b26\u4e32\u3002</p> <ul> <li>\u6a2a\u5411\u626b\u63cf\u7684\u601d\u8def\u662f\u4e24\u4e24\u6bd4\u8f83\u5e8f\u5217\u4e2d\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u7528\u6bd4\u8f83\u540e\u5f97\u5230\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u518d\u53bb\u4e0e\u540e\u9762\u7684\u5b57\u7b26\u4e32\u6bd4\u8f83\uff1b</li> <li>\u7eb5\u5411\u626b\u63cf\u7684\u601d\u8def\u662f\u9010\u4e00\u6bd4\u8f83\u5e8f\u5217\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e00\u4f4d\u5b57\u7b26\u662f\u5426\u76f8\u540c\u3002</li> </ul>","tags":["DIF:\u7b80\u5355","\u5b57\u7b26\u4e32"]},{"location":"leetcode/problem_14/#_2","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(mn)\\)\uff0c\\(m\\) \u4e3a\u5e8f\u5217\u4e2d\u6240\u6709\u5b57\u7b26\u4e32\u7684\u5e73\u5747\u957f\u5ea6\uff0c\\(n\\) \u4e3a\u5e8f\u5217\u4e2d\u5b57\u7b26\u4e32\u7684\u6570\u91cf\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(O(1)\\)\uff0c\u989d\u5916\u4f7f\u7528\u7684\u7a7a\u95f4\u4e0d\u968f\u4efb\u52a1\u89c4\u6a21\u800c\u6539\u53d8\u3002</li> </ul>","tags":["DIF:\u7b80\u5355","\u5b57\u7b26\u4e32"]},{"location":"leetcode/problem_14/#_3","title":"\u4ee3\u7801","text":"Python <pre><code># \u672c\u6837\u4f8b\u91c7\u7528\u7eb5\u5411\u626b\u63cf\u65b9\u5f0f\u3002\ndef longestCommonPrefix(strs: list[str]) -&gt; str:\n    # \u501f\u52a9 zip \u51fd\u6570\u5c06\u5217\u8868\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7684\u76f8\u540c\u4f4d\u5b57\u7b26\u7ec4\u6210\u5143\u7ec4\uff0c\u4ee5\u4fbf\u5224\u65ad\u6bcf\u4e00\u4f4d\u5b57\u7b26\u662f\u5426\u76f8\u540c\u3002\n    for i, letters in enumerate(zip(*strs)):\n        if len(set(letters)) != 1:\n            return strs[0][:i]\n    # \u5982\u679c\u4ee5\u4e0a\u6d41\u7a0b\u6ca1\u6709\u627e\u5230\u6700\u957f\u516c\u5171\u5b57\u4e32\uff0c\u5219\u6700\u957f\u516c\u5171\u5b57\u4e32\u4e00\u5b9a\u662f\u5e8f\u5217\u4e2d\u6700\u77ed\u7684\u5b57\u7b26\u4e32\u3002\n    return min(strs, key=len)\n</code></pre>","tags":["DIF:\u7b80\u5355","\u5b57\u7b26\u4e32"]},{"location":"leetcode/problem_2/","title":"2. \u4e24\u6570\u76f8\u52a0","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u975e\u7a7a\u94fe\u8868\u5206\u522b\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u6570\u5b57\u4ee5\u5012\u5e8f\u5b58\u50a8\uff0c\u800c\u94fe\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u5b58\u50a8\u4e00\u4e2a\u6570\u5b57\u3002\u5c06\u4e24\u6570\u76f8\u52a0\u5e76\u4ee5\u94fe\u8868\u8fd4\u56de\u4e24\u6570\u4e4b\u548c\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u5b9a\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4ee5 0 \u5f00\u5934\uff08\u9664 0 \u672c\u8eab\u4ee5\u5916\uff09\u3002</p> \u6837\u4f8b 1\u6837\u4f8b 2\u6837\u4f8b 3\u9650\u5236\u6761\u4ef6 <p></p> <p><pre>\n<code>\u8f93\u5165\uff1al1 = [2,4,3], l2 = [5,6,4]\n\u8f93\u51fa\uff1a[7,0,8]\n\u89e3\u91ca\uff1a342 + 465 = 807.</code>\n</pre></p> <p><pre>\n<code>\u8f93\u5165\uff1al1 = [0], l2 = [0]\n\u8f93\u51fa\uff1a[0]</code>\n</pre></p> <p><pre>\n<code>\u8f93\u5165\uff1al1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n\u8f93\u51fa\uff1a[8,9,9,9,0,0,0,1]</code>\n</pre></p> <ul> <li>\u6bcf\u4e2a\u94fe\u8868\u6240\u5305\u542b\u7684\u8282\u70b9\u6570\u91cf\u8303\u56f4\u662f <code>[1, 100]</code>\uff1b</li> <li><code>0 &lt;= Node.val &lt;= 9</code>\uff1b</li> <li>\u4fdd\u8bc1\u5217\u8868\u8868\u793a\u4e00\u4e2a\u4e0d\u4ee5 0 \u5f00\u5934\u7684\u6570\u5b57\u3002</li> </ul>","tags":["DIF:\u4e2d\u7b49","\u94fe\u8868","\u6570\u5b66"]},{"location":"leetcode/problem_2/#_1","title":"\u89e3\u6790","text":"","tags":["DIF:\u4e2d\u7b49","\u94fe\u8868","\u6570\u5b66"]},{"location":"leetcode/problem_2/#_2","title":"\u590d\u6742\u5ea6\u5206\u6790","text":"<ul> <li>\u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(\\max(m, n))\\)\uff0c\\(m\\) \u548c \\(n\\) \u5206\u522b\u4ee3\u8868\u4e24\u4e2a\u94fe\u8868\u957f\u5ea6\u3002\u9700\u8981\u904d\u5386\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u6c42\u548c\uff0c\u904d\u5386\u6b21\u6570\u53d6\u51b3\u4e8e\u4e8c\u8005\u4e2d\u6700\u957f\u7684\u94fe\u8868\u3002</li> <li>\u7a7a\u95f4\u590d\u6742\u5ea6\uff1a \\(O(\\max(m, n))\\)\uff0c\\(m\\) \u548c \\(n\\) \u5206\u522b\u4ee3\u8868\u4e24\u4e2a\u94fe\u8868\u957f\u5ea6\u3002\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u5b58\u50a8\u4e24\u6570\u4e4b\u548c\uff0c\u65b0\u94fe\u8868\u957f\u5ea6\u53d6\u51b3\u4e8e\u4e8c\u8005\u4e2d\u6700\u957f\u7684\u94fe\u8868\uff0c\u6700\u957f\u4e3a \\(\\max(m, n) + 1\\)\u3002</li> </ul>","tags":["DIF:\u4e2d\u7b49","\u94fe\u8868","\u6570\u5b66"]},{"location":"leetcode/problem_2/#_3","title":"\u4ee3\u7801","text":"PythonC++ <pre><code># \u5355\u5411\u94fe\u8868\u5b9a\u4e49\uff1a\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\ndef add_two_numbers(l1: Optional[ListNode],\n                    l2: Optional[ListNode]) -&gt; Optional[ListNode]:\n    # \u521b\u5efa\u7a7a\u6307\u9488\n    head = tail = None\n    carry = 0\n\n    # \u904d\u5386\u94fe\u8868\n    while l1 or l2:\n        # \u83b7\u53d6\u52a0\u6570\u94fe\u8868\u5f53\u524d\u8282\u70b9\u503c\uff0c\u6c42\u548c\u53ca\u8fdb\u4f4d\u503c\n        val_1 = l1.val if l1 else 0\n        val_2 = l2.val if l2 else 0\n        carry, res = divmod(val_1 + val_2 + carry, 10)\n\n        # \u5982\u679c\u5934\u6307\u9488\u4e3a\u7a7a\uff0c\u521b\u5efa\u7ed3\u679c\u94fe\u8868\uff0c\u5e76\u5b58\u50a8\u8ba1\u7b97\u7ed3\u679c\n        if not head:\n            head = tail = ListNode(res)\n        # \u5426\u5219\uff0c\u94fe\u8868\u540e\u6dfb\u52a0\u65b0\u8282\u70b9\uff0c\u5b58\u50a8\u8ba1\u7b97\u7ed3\u679c\uff0c\u5e76\u79fb\u52a8\u5c3e\u6307\u9488\u5230\u65b0\u8282\u70b9\n        else:\n            tail.next = ListNode(res)\n            tail = tail.next\n\n        # \u79fb\u52a8\u52a0\u6570\u6307\u9488\n        l1 = l1.next if l1 else None\n        l2 = l2.next if l2 else None\n    # \u5c06\u8fdb\u4f4d\u8ffd\u52a0\u5230\u7ed3\u679c\u94fe\u8868\n    if carry:\n        tail.next = ListNode(carry)\n\n    return head\n</code></pre> <pre><code>/**\n* \u5355\u5411\u94fe\u8868\u5b9a\u4e49\uff1a\n* struct ListNode {\n*     int val;\n*     ListNode *next;\n*     ListNode() : val(0), next(nullptr) {}\n*     ListNode(int x) : val(x), next(nullptr) {}\n*     ListNode(int x, ListNode *next) : val(x), next(next) {}\n* };\n*/\nListNode* add_two_numbers(ListNode* l1, ListNode* l2) {\nListNode *head = nullptr, *tail = nullptr;\nint carry = 0;\n\nwhile (l1 || l2) {\nint val_1 = l1 ? l1-&gt;val : 0;\nint val_2 = l2 ? l2-&gt;val : 0;\nint sum = val_1 + val_2;\n\nif (!head) {\nhead = tail = new ListNode(sum % 10);\n} else {\ntail-&gt;next = new ListNode(sum % 10);\ntail = tail-&gt;next;\n}\ncarry = sum / 10;\n\nif (l1) {\nl1 = l1-&gt;next;\n}\nif (l2) {\nl2 = l2-&gt;next;\n}\n}\nif (carry) {\ntail-&gt;next = new ListNode(carry);\n}\n\nreturn head;\n}\n</code></pre>","tags":["DIF:\u4e2d\u7b49","\u94fe\u8868","\u6570\u5b66"]},{"location":"leetcode/problem_26/","title":"26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a \u975e\u964d\u5e8f\u6392\u5e8f \u7684\u6574\u6570\u5e8f\u5217 <code>nums</code>\uff0c\u539f\u5730 \u79fb\u9664\u91cd\u590d\u5143\u7d20\uff0c\u4f7f\u6bcf\u4e00\u4e2a\u7684\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002\u5143\u7d20\u4e4b\u95f4\u7684 \u76f8\u5bf9\u4f4d\u7f6e \u5e94\u5f53\u4fdd\u6301 \u4e00\u81f4\u3002</p> <p>\u9274\u4e8e\u90e8\u5206\u8bed\u8a00\u65e0\u6cd5\u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u4f60\u5fc5\u987b\u5c06\u7ed3\u679c\u653e\u5728\u5e8f\u5217 <code>nums</code> \u7684 \u7b2c\u4e00\u90e8\u5206\u3002\u66f4\u6b63\u5f0f\u5730\uff0c\u5982\u679c\u79fb\u9664\u91cd\u590d\u5143\u7d20\u540e\u7684\u5e8f\u5217\u6709 <code>k</code> \u4e2a\u5143\u7d20\uff0c\u90a3\u4e48\u5e8f\u5217 <code>nums</code> \u7684\u524d <code>k</code> \u4e2a\u5143\u7d20\u5e94\u5f53\u4fdd\u5b58\u6700\u7ec8\u7ed3\u679c\u3002<code>k</code> \u4e2a\u5143\u7d20\u4ee5\u5916\u7684\u5143\u7d20\u4fdd\u5b58\u4e86\u4ec0\u4e48\u503c\u65e0\u5173\u7d27\u8981\u3002</p> <p>\u5c06\u6700\u7ec8\u7ed3\u679c\u5b58\u5165 <code>nums</code> \u7684\u524d <code>k</code> \u4e2a\u4f4d\u7f6e\u540e\u8fd4\u56de <code>k</code>\u3002</p> <p>\u4e0d\u8981 \u4e3a\u5176\u4ed6\u5e8f\u5217\u5206\u914d\u989d\u5916\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u4ee5 O(1) \u7684\u989d\u5916\u7a7a\u95f4\uff0c\u901a\u8fc7 \u539f\u5730\u4fee\u6539\u8f93\u5165\u5e8f\u5217 \u89e3\u51b3\u672c\u9898\u3002</p> <p>\u5224\u9898\u6807\u51c6\uff1a</p> <p>\u7cfb\u7edf\u5c06\u4f7f\u7528\u4e0b\u9762\u7684\u4ee3\u7801\u68c0\u67e5\u9898\u89e3\uff1a</p> <pre><code>int[] nums = [...]; // \u8f93\u5165\u5e8f\u5217\nint[] expectedNums = [...]; // \u6b63\u786e\u957f\u5ea6\u7684\u9884\u671f\u7b54\u6848\n\nint k = removeDuplicates(nums); // \u8c03\u7528\u5b9e\u73b0\u4ee3\u7801\n\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\nassert nums[i] == expectedNums[i];\n}\n</code></pre> <p>\u5982\u679c\u6240\u6709\u65ad\u8a00\u90fd\u901a\u8fc7\uff0c\u5219\u9898\u89e3\u901a\u8fc7\u3002</p> \u6837\u4f8b 1\u6837\u4f8b 2\u9650\u5236\u6761\u4ef6 <p><pre>\n<code>\u8f93\u5165\uff1anums = [1,1,2]\n\u8f93\u51fa\uff1a2, nums = [1,2,_]\n\u89e3\u91ca\uff1a\u4f60\u7684\u4ee3\u7801\u5e94\u5f53\u8fd4\u56de k = 2\uff0c\u524d\u4e24\u4e2a\u5143\u7d20\u5206\u522b\u4e3a 1 \u548c 2\u3002\nk \u4ee5\u5916\u7684\u4f4d\u7f6e\u5b58\u653e\u4ec0\u4e48\u503c\u65e0\u5173\u7d27\u8981\uff08\u56e0\u6b64\u8fd9\u4e9b\u5143\u7d20\u4e3a\u4e0b\u5212\u7ebf\uff09\u3002</code>\n</pre></p> <p><pre>\n<code>\u8f93\u5165\uff1anums = [0,0,1,1,1,2,2,3,3,4]\n\u8f93\u51fa\uff1a5, nums = [0,1,2,3,4,,,,,_]\n\u89e3\u91ca\uff1a\u4f60\u7684\u4ee3\u7801\u5e94\u5f53\u8fd4\u56de k = 5\uff0c\u524d\u4e94\u4e2a\u5143\u7d20\u5206\u522b\u4e3a 0\u30011\u30012\u30013 \u548c 4\u3002\nk \u4ee5\u5916\u7684\u4f4d\u7f6e\u5b58\u653e\u4ec0\u4e48\u503c\u65e0\u5173\u7d27\u8981\uff08\u56e0\u6b64\u8fd9\u4e9b\u5143\u7d20\u4e3a\u4e0b\u5212\u7ebf\uff09\u3002</code>\n</pre></p> <ul> <li><code>1 &lt;= nums.length &lt;= 3 * 104</code>\uff1b</li> <li><code>-100 &lt;= nums[i] &lt;= 100</code>\uff1b</li> <li><code>nums</code> \u4ee5 \u975e\u964d\u5e8f \u6392\u5e8f\u3002</li> </ul>","tags":["DIF:\u7b80\u5355","\u6570\u7ec4","\u53cc\u6307\u9488"]},{"location":"leetcode/problem_26/#_1","title":"\u89e3\u6790","text":"","tags":["DIF:\u7b80\u5355","\u6570\u7ec4","\u53cc\u6307\u9488"]},{"location":"leetcode/","title":"\u9898\u89e3\u7d22\u5f15","text":""},{"location":"leetcode/#dif","title":"DIF:\u4e2d\u7b49","text":"<ul> <li>2. \u4e24\u6570\u76f8\u52a0</li> </ul>"},{"location":"leetcode/#dif_1","title":"DIF:\u7b80\u5355","text":"<ul> <li>14. \u6700\u957f\u516c\u5171\u524d\u7f00</li> <li>26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879</li> </ul>"},{"location":"leetcode/#_2","title":"\u53cc\u6307\u9488","text":"<ul> <li>26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879</li> </ul>"},{"location":"leetcode/#_3","title":"\u5b57\u7b26\u4e32","text":"<ul> <li>14. \u6700\u957f\u516c\u5171\u524d\u7f00</li> </ul>"},{"location":"leetcode/#_4","title":"\u6570\u5b66","text":"<ul> <li>2. \u4e24\u6570\u76f8\u52a0</li> </ul>"},{"location":"leetcode/#_5","title":"\u6570\u7ec4","text":"<ul> <li>26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879</li> </ul>"},{"location":"leetcode/#_6","title":"\u94fe\u8868","text":"<ul> <li>2. \u4e24\u6570\u76f8\u52a0</li> </ul>"}]}